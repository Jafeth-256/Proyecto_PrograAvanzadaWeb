@model Proyecto_PrograAvanzadaWeb.Models.UsuarioViewModel
@{
    ViewData["Title"] = "Detalles del Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="details-container">
    <!-- Header -->
    <div class="details-header">
        <div class="header-content">
            <div class="breadcrumb-nav">
                <a href="/Usuarios/Index" class="breadcrumb-link">
                    <i class="mdi mdi-account-multiple"></i> Usuarios
                </a>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">Detalles</span>
            </div>
            <h1 class="page-title">
                <i class="mdi mdi-account-details"></i>
                Detalles del Usuario
            </h1>
            <p class="page-subtitle">Información completa del usuario #@Model.IdUsuario</p>
        </div>
        <div class="header-actions">
            <a href="/Usuarios/Editar/@Model.IdUsuario" class="btn-modern btn-primary">
                <i class="mdi mdi-pencil"></i>
                Editar Usuario
            </a>
            <a href="/Usuarios/Index" class="btn-modern btn-secondary">
                <i class="mdi mdi-arrow-left"></i>
                Volver
            </a>
        </div>
    </div>

    <div class="details-content">
        <!-- Avatar y estado -->
        <div class="user-profile-card">
            <div class="avatar-section">
                @if (!string.IsNullOrEmpty(Model.FotoPath))
                {
                    <img src="@Model.FotoPath" alt="Avatar" class="user-avatar">
                }
                else
                {
                    <div class="default-avatar">
                        @Model.Nombre.Substring(0, 1).ToUpper()
                    </div>
                }
                <div class="status-indicator @(Model.Estado ? "active" : "inactive")"></div>
            </div>
            <div class="profile-info">
                <h2 class="user-name">@Model.Nombre</h2>
                <p class="user-role">@Model.NombreRol</p>
                <p class="user-email">@Model.Correo</p>
                <div class="status-badges">
                    <span class="status-badge @(Model.Estado ? "active" : "inactive")">
                        <i class="mdi @(Model.Estado ? "mdi-check-circle" : "mdi-close-circle")"></i>
                        @Model.EstadoTexto
                    </span>
                    <span class="role-badge @(Model.NombreRol == "Usuario Administrador" ? "admin" : "user")">
                        <i class="mdi @(Model.NombreRol == "Usuario Administrador" ? "mdi-shield-crown" : "mdi-account")"></i>
                        @Model.NombreRol
                    </span>
                </div>
            </div>
        </div>

        <!-- Información detallada -->
        <div class="content-grid">
            <!-- Información Personal -->
            <div class="info-card">
                <div class="card-header">
                    <h3><i class="mdi mdi-account-circle"></i> Información Personal</h3>
                </div>
                <div class="card-body">
                    <div class="info-grid">
                        <div class="info-item">
                            <label><i class="mdi mdi-card-account-details"></i> Identificación</label>
                            <span>@Model.Identificacion</span>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Telefono))
                        {
                            <div class="info-item">
                                <label><i class="mdi mdi-phone"></i> Teléfono</label>
                                <span><a href="tel:@Model.Telefono" class="contact-link">@Model.Telefono</a></span>
                            </div>
                        }
                        @if (Model.FechaNacimiento.HasValue)
                        {
                            <div class="info-item">
                                <label><i class="mdi mdi-calendar"></i> Fecha de Nacimiento</label>
                                <span>
                                    @Model.FechaNacimiento.Value.ToString("dd/MM/yyyy")
                                    <small class="age-info">
                                        (Edad: @((DateTime.Now - Model.FechaNacimiento.Value).Days / 365) años)
                                    </small>
                                </span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Direccion))
                        {
                            <div class="info-item full-width">
                                <label><i class="mdi mdi-map-marker"></i> Dirección</label>
                                <span>@Model.Direccion</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Información del Sistema -->
            <div class="info-card">
                <div class="card-header">
                    <h3><i class="mdi mdi-cog"></i> Información del Sistema</h3>
                </div>
                <div class="card-body">
                    <div class="info-grid">
                        <div class="info-item">
                            <label><i class="mdi mdi-calendar-plus"></i> Fecha de Registro</label>
                            <span>
                                @Model.FechaRegistro.ToString("dd/MM/yyyy HH:mm")
                                <small class="time-info">
                                    Hace @((DateTime.Now - Model.FechaRegistro).Days) días
                                </small>
                            </span>
                        </div>
                        <div class="info-item">
                            <label><i class="mdi mdi-update"></i> Última Actualización</label>
                            <span>
                                @Model.FechaActualizacion.ToString("dd/MM/yyyy HH:mm")
                                <small class="time-info">
                                    Hace @((DateTime.Now - Model.FechaActualizacion).Days) días
                                </small>
                            </span>
                        </div>
                        <div class="info-item">
                            <label><i class="mdi mdi-identifier"></i> ID de Usuario</label>
                            <span class="user-id">#@Model.IdUsuario</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Acciones Rápidas -->
        <div class="quick-actions">
            <h3>Acciones Rápidas</h3>
            <div class="actions-grid">
                <div class="action-card" onclick="window.location.href='/Usuarios/Editar/@Model.IdUsuario'">
                    <div class="action-icon primary">
                        <i class="mdi mdi-pencil"></i>
                    </div>
                    <div class="action-content">
                        <h4>Editar Usuario</h4>
                        <p>Modificar información del usuario</p>
                    </div>
                </div>

                <div class="action-card" onclick="toggleEstado(@Model.IdUsuario, @Model.Estado.ToString().ToLower())">
                    <div class="action-icon @(Model.Estado ? "warning" : "success")">
                        <i class="mdi mdi-toggle-switch"></i>
                    </div>
                    <div class="action-content">
                        <h4>@(Model.Estado ? "Desactivar" : "Activar") Usuario</h4>
                        <p>Cambiar estado del usuario</p>
                    </div>
                </div>

                <div class="action-card" onclick="enviarCorreo('@Model.Correo')">
                    <div class="action-icon info">
                        <i class="mdi mdi-email"></i>
                    </div>
                    <div class="action-content">
                        <h4>Enviar Correo</h4>
                        <p>Contactar al usuario por email</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .details-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        margin-left: 280px;
    }

    .details-header {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        border-radius: 20px;
        padding: 30px 40px;
        margin-bottom: 30px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        overflow: hidden;
    }

        .details-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

    .header-content {
        z-index: 1;
    }

    .breadcrumb-nav {
        margin-bottom: 15px;
        font-size: 0.9rem;
    }

    .breadcrumb-link {
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        transition: color 0.3s ease;
    }

        .breadcrumb-link:hover {
            color: white;
        }

    .breadcrumb-separator {
        margin: 0 10px;
        opacity: 0.6;
    }

    .breadcrumb-current {
        color: white;
        font-weight: 500;
    }

    .page-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin: 0 0 8px 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .page-subtitle {
        font-size: 1rem;
        opacity: 0.8;
        margin: 0;
    }

    .header-actions {
        display: flex;
        gap: 15px;
        z-index: 1;
    }

    .btn-modern {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        border-radius: 12px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

        .btn-modern.btn-primary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn-modern.btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.2);
            text-decoration: none;
            color: white;
        }

    .details-content {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .user-profile-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        padding: 30px;
        display: flex;
        align-items: center;
        gap: 30px;
        border: 1px solid rgba(0,0,0,0.05);
    }

    .avatar-section {
        position: relative;
        flex-shrink: 0;
    }

    .user-avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid rgba(107, 114, 128, 0.2);
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }

    .default-avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: white;
        border: 4px solid rgba(107, 114, 128, 0.2);
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }

    .status-indicator {
        position: absolute;
        bottom: 8px;
        right: 8px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        border: 3px solid white;
    }

        .status-indicator.active {
            background: #10b981;
        }

        .status-indicator.inactive {
            background: #6b7280;
        }

    .profile-info {
        flex: 1;
    }

    .user-name {
        font-size: 2rem;
        font-weight: 700;
        color: #374151;
        margin: 0 0 8px 0;
    }

    .user-role {
        font-size: 1.1rem;
        color: #6b7280;
        margin: 0 0 6px 0;
        font-weight: 500;
    }

    .user-email {
        font-size: 1rem;
        color: #9ca3af;
        margin: 0 0 20px 0;
    }

    .status-badges {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .status-badge.active {
            background: #dcfce7;
            color: #166534;
        }

        .status-badge.inactive {
            background: #f3f4f6;
            color: #6b7280;
        }

    .role-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
    }

        .role-badge.admin {
            background: #fef2f2;
            color: #dc2626;
        }

        .role-badge.user {
            background: #eff6ff;
            color: #2563eb;
        }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
    }

    .info-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        overflow: hidden;
        border: 1px solid rgba(0,0,0,0.05);
    }

        .info-card .card-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 20px 30px;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }

            .info-card .card-header h3 {
                margin: 0;
                font-size: 1.3rem;
                font-weight: 600;
                color: #374151;
                display: flex;
                align-items: center;
                gap: 10px;
            }

        .info-card .card-body {
            padding: 30px;
        }

    .info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .info-item {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .info-item.full-width {
            grid-column: 1 / -1;
        }

        .info-item label {
            font-size: 0.85rem;
            font-weight: 600;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .info-item span {
            font-size: 1rem;
            color: #374151;
            font-weight: 500;
            padding: 8px 0;
        }

    .contact-link {
        color: #6b7280;
        text-decoration: none;
        transition: color 0.3s ease;
    }

        .contact-link:hover {
            color: #4b5563;
        }

    .age-info, .time-info {
        display: block;
        font-size: 0.8rem;
        color: #9ca3af;
        margin-top: 4px;
    }

    .user-id {
        font-family: monospace;
        background: #f3f4f6;
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 0.9rem;
    }

    .quick-actions h3 {
        font-size: 1.8rem;
        font-weight: 700;
        color: #374151;
        margin-bottom: 20px;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
    }

    .action-card {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 25px;
        background: white;
        border-radius: 16px;
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.05);
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        cursor: pointer;
    }

        .action-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 30px rgba(0,0,0,0.12);
        }

    .action-icon {
        width: 60px;
        height: 60px;
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
        color: white;
        flex-shrink: 0;
    }

        .action-icon.primary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        }

        .action-icon.success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .action-icon.warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .action-icon.info {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        }

    .action-content h4 {
        margin: 0 0 6px 0;
        font-size: 1.1rem;
        font-weight: 600;
        color: #374151;
    }

    .action-content p {
        margin: 0;
        font-size: 0.9rem;
        color: #6b7280;
        line-height: 1.4;
    }

    @@media only screen and (max-width: 1024px) {
        .details-container

    {
        margin-left: 0;
        padding: 0 15px;
    }

    }

    @@media only screen and (max-width: 768px) {
        .details-container

    {
        margin-left: 0;
        padding: 0 10px;
    }

    .details-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
        padding: 25px 20px;
    }

    .header-actions {
        justify-content: center;
    }

    .user-profile-card {
        flex-direction: column;
        text-align: center;
        gap: 20px;
    }

    .content-grid {
        grid-template-columns: 1fr;
        gap: 20px;
    }

    .info-grid {
        grid-template-columns: 1fr;
    }

    .actions-grid {
        grid-template-columns: 1fr;
    }

    .action-card {
        padding: 20px;
    }

    .page-title {
        font-size: 1.8rem;
    }

    }
</style>

<script>
    function toggleEstado(usuarioId, estadoActual) {
        const nuevoEstado = !estadoActual;
        const accion = nuevoEstado ? 'activar' : 'desactivar';

        if (confirm(`¿Está seguro de que desea ${accion} este usuario?`)) {
            fetch('/Usuarios/CambiarEstado', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `idUsuario=${usuarioId}&nuevoEstado=${nuevoEstado}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al cambiar el estado del usuario');
            });
        }
    }

    function enviarCorreo(correo) {
        window.location.href = `mailto:${correo}`;
    }
</script>